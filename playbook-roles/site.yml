---

##### Tags used #####
#
#  vms_check
#  vms_clon
#  vms_creating
#  vms_conf
#  vms_start
#
#  elastic_get
#  kibana_get
#
#  jvm_install
#  elastic_install
#  kibana_install
#
#  jvm_conf
#  elastic_conf
#  kibana_conf
#
#  elastic_start
#  kibana_start
#
#####################


##### Checking if VMs exists ######

- name: Some preparation checks
  hosts: prox_vms_vmbr404
  pre_tasks:
    - name: check ssh to remote hosts works
      register: test_hostname_id
      shell: "hostname; id"
      ignore_errors: yes
      #changed_when: false
      tags:
      - vms_check
    - name: Setting facts if vms are exists
      set_fact: if_exist={{ test_hostname_id.rc }}
      tags:
      - vms_check
      #when: test_hostname_id.rc == 0

##### Creating template for VMs ######

- name: Create proxmox template or working vms
  hosts: localhost
  gather_facts: no
  pre_tasks:

    - name: Create template vm template_debian_1vcpu_2cores_vmbr404_lvm_15
      community.general.proxmox_kvm:
        api_user: "{{ api_user }}"
        api_host: "{{ api_host }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        name: template1
        node: vm
        net: '{"net0":"virtio,bridge={{ vm_vmbr }},rate=200"}'
        virtio: '{"virtio0":"{{ vm_pool }}:15"}'
        cores: 2
        vcpus: 1
        ostype: l26
        memory: 2048
      tags:
        - vms_clon_creating
      when: not if_exist == 1

##### Cloning VMs ######

    - name: Clone vm template1
      community.general.proxmox_kvm:
        api_user: "{{ api_user }}"
        api_host: "{{ api_host }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        clone: template1
        newid: "{{ item.split('.')[3] }}"
        name: "ansible-{{ item.split('.')[3] }}-t1"
        node: vm
        onboot: yes
        storage: thinpool
        timeout: 600
      with_inventory_hostnames:
        - prox_vms_vmbr404
      tags:
        - vms_clon
      when: not if_exist == 1

##### Creating VMs ######

    - name: Create new vm via Cloud-init
      community.general.proxmox_kvm:
        api_user: "{{ api_user }}"
        api_host: "{{ api_host }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        vmid: "{{ item.split('.')[3] }}"
        name: "ansible-{{ item.split('.')[3] }}-t1"
        node: vm
        onboot: yes
        ide:
          ide0: "thinpool:vm-{{ item.split('.')[3] }}-cloudinit,format=raw"
        sshkeys: "{{ our_ssh_keys }}"
        nameservers:
          - 'dns.linkintel.ru'
          - '8.8.8.8'
        cores: 2
        sockets: 1
        memory: 2048
        net:
          net0: "virtio,bridge={{ vm_vmbr }}"
        ipconfig:
          ipconfig0: "ip={{ vm_ipv4_pref }}{{ item.split('.')[3] }}{{ vm_cidr }}"
        timeout: 600
      with_inventory_hostnames:
        - prox_vms_vmbr404
      tags:
        - vms_creating
      when: not if_exist == 1

##### Configuring VMs ######

- name: Set IP addresses
  hosts: hvs_linkintel
  gather_facts: no
  pre_tasks:
    - name: Set IP on each vm
      command: "qm set {{ item.split('.')[3] }}  --ipconfig0 gw={{ vm_gateway }},ip={{ vm_ipv4_pref }}{{ item.split('.')[3] }}{{ vm_cidr }}"
      with_inventory_hostnames:
        - prox_vms_vmbr404
      changed_when: false
      tags:
        - vms_conf
      when: not if_exist == 1


##### Starting VMs ######

- name: Start
  hosts: localhost
  gather_facts: no
  pre_tasks:

    - name: Start each vm
      proxmox_kvm:
        api_user: "{{ api_user }}"
        api_host: "{{ api_host }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        vmid: "{{ item.split('.')[3] }}"
        state: started
      with_inventory_hostnames:
        - prox_vms_vmbr404
      tags:
        - vms_start
      when: not if_exist == 1

##### Downloading ######

    - name: run vpn
      become: yes
      ansible.builtin.shell:
        cmd: "/root/protonvpn/ovpn up"
      tags:
        - kibana_get
        - elastic_get
    - name: download tar.gz Elasticsearch need version
      ansible.builtin.get_url:
        url: "https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-{{ elastic_version }}-linux-{{ host_platform }}.tar.gz"
        dest: "files/elasticsearch-{{ elastic_version }}-linux-{{ host_platform }}.tar.gz"
        tmp_dest: files/
      tags:
        - elastic_get
    - name: download tar.gz Kibana need version
      ansible.builtin.get_url:
        url: "https://artifacts.elastic.co/downloads/kibana/kibana-{{ elastic_version }}-linux-{{ host_platform }}.tar.gz"
        dest: "files/kibana-{{ elastic_version }}-linux-{{ host_platform }}.tar.gz"
        tmp_dest: files/
      tags:
        - kibana_get
    - name: stop vpn
      ansible.builtin.shell:
        cmd: "/root/protonvpn/ovpn down"
      tags:
        - kibana_get
        - elastic_get

##### Installing & configuring ######

- name: Install Java
  hosts: prox_vms_vmbr404
  pre_tasks:
    - name: Set facts for Java 11 vars
      set_fact:
        java_home: "/opt/jdk/{{ java_jdk_version }}"
      tags:
        - jvm_install
    - name: Upload .tar.gz file containing binaries from local storage
      copy:
        #src: "{{ java_oracle_jdk_package }}"
        src: "files/{{ java_oracle_jdk_package }}"
        dest: "/tmp/jdk-{{ java_jdk_version }}.tar.gz"
        mode: 0755
      register: download_java_binaries
      until: download_java_binaries is succeeded
      tags:
        - jvm_install
    - name: Ensure installation dir exists
      become: true
      file:
        state: directory
        path: "{{ java_home }}"
        mode: 0755
      tags:
        - jvm_install
    - name: Extract java in the installation directory
      become: true
      unarchive:
        copy: false
        src: "/tmp/jdk-{{ java_jdk_version }}.tar.gz"
        dest: "{{ java_home }}"
        extra_opts: [--strip-components=1]
        creates: "{{ java_home }}/bin/java"
      tags:
        - jvm_install

- name: Install & Config Elasticsearch
  hosts: elasticsearch
  remote_user: "{{ ansible_user }}"
  roles:
    - netology.elastic_role
  post_tasks:

#     - name: Add the group elastic_group
#       become: yes
#       ansible.builtin.group:
#         name: "{{ elastic_group }}"
#         state: present
#       tags:
#         - elastic_install
#     - name: Add the user elastic_user
#       become: yes
#       ansible.builtin.user:
#         name: "{{ elastic_user }}"
#       tags:
#         - elastic_install

#     - name: copy tar.gz Elasticsearch
#       become: yes
#       ansible.builtin.copy:
#         src: "files/elasticsearch-{{ elastic_version }}-linux-x86_64.tar.gz"
#         dest: "/tmp/elasticsearch-{{ elastic_version }}-linux-x86_64.tar.gz"
#         mode: 0755
#         owner: "{{ elastic_user }}"
#         group: "{{ elastic_group }}"
#         force: true
#       tags:
#         - elastic_install
#     - name: Create directrory for Elasticsearch
#       become: yes
#       ansible.builtin.file:
#         state: directory
#         path: "{{ elastic_home }}"
#         owner: "{{ elastic_user }}"
#         group: "{{ elastic_group }}"
#         mode: 0755
#       tags:
#         - elastic_install
#     - name: Create directory for Elasticsearch & JVM Logs
#       become: yes
#       ansible.builtin.file:
#         state: directory
#         path: "{{ elastic_logs }}"
#         owner: "{{ elastic_user }}"
#         group: "{{ elastic_group }}"
#         mode: 0755
#       tags:
#         - elastic_install
#     - name: Extract Elasticsearch in the installation directory
#       become: yes
#       ansible.builtin.unarchive:
#         copy: false
#         src: "/tmp/elasticsearch-{{ elastic_version }}-linux-{{ host_platform }}.tar.gz"
#         owner: "{{ elastic_user }}"
#         group: "{{ elastic_group }}"
#         dest: "{{ elastic_home }}"
#         extra_opts: [--strip-components=1]
#         creates: "{{ elastic_home }}/bin/elasticsearch"
#       tags:
#         - elastic_install
#     - name: Set environment
#       become: yes
#       ansible.builtin.template:
#         src: templates/elk.sh.j2
#         dest: /etc/profile.d/elk.sh
#         owner: "{{ elastic_user }}"
#         group: "{{ elastic_group }}"
#         mode: 0755
#         force: true
#       tags:
#         - elastic_conf
#         - kibana_conf
#     - name: Run elk.sh for export vars
#       become: yes
#       ansible.builtin.command:
#         cmd: /bin/bash /etc/profile.d/elk.sh
#       tags:
#         - elastic_conf
#         - kibana_conf
    - name: Make elk config
      become: yes
      ansible.builtin.copy:
        src: templates/elk.cfg.j2
        dest: "{{ elastic_home }}/config/elasticsearch.yml"
        owner: "{{ elastic_user }}"
        group: "{{ elastic_group }}"
        mode: 0644
        backup: yes
      tags:
        - elastic_conf
    - name: Make jvm config
      become: yes
      ansible.builtin.shell: |
        echo '-Xlog:disable
        -Xlog:all=warning:stderr:utctime,level,tags
        -Xlog:gc*,gc+age=trace,safepoint:file={{ elastic_home }}/logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m
        -XX:ErrorFile={{ elastic_home }}/logs/gc_errors.log' > "{{ elastic_home }}/config/jvm.options.d/gc.options"
      tags:
        - jvm_conf
    - name: Make max map count 262144
      become: yes
      ansible.builtin.shell: |
        sysctl -w vm.max_map_count=262144
        if ! [ `cat /etc/sysctl.conf | grep 'vm.max_map_count'` ]; then echo 'vm.max_map_count=262144' >> /etc/sysctl.conf; fi
      tags:
        - elastic_conf
    - name: Make kibana config
      become: yes
      ansible.builtin.template:
        src: templates/kbn.cfg.j2
        dest: "{{ kibana_home }}/config/kibana.yml"
        owner: "{{ elastic_user }}"
        group: "{{ elastic_group }}"
        mode: 0644
        backup: yes
      tags:
        - kibana_conf

- name: Install & Config Kibana
  hosts: kibana
  roles:
    - kibana_role
  post_tasks:

    # - name: Create directrory for Kibana
    #   become: true
    #   file:
    #     state: directory
    #     path: "{{ kibana_home }}"
    #     mode: 0755
    #   tags:
    #     - kibana_install
    # - name: copy tar.gz Kibana
    #   become: yes
    #   ansible.builtin.copy:
    #     src: "files/kibana-{{ elastic_version }}-linux-{{ host_platform }}.tar.gz"
    #     dest: "/tmp/kibana-{{ elastic_version }}-linux-{{ host_platform }}.tar.gz"
    #     mode: 0755
    #     owner: "{{ elastic_user }}"
    #     group: "{{ elastic_group }}"
    #     force: true
    #   register: get_kibana
    #   until: get_kibana is succeeded
    #   tags:
    #     - kibana_install
    # - name: Extract Kibana in the installation directory
    #   become: yes
    #   ansible.builtin.unarchive:
    #     copy: false
    #     src: "/tmp/kibana-{{ elastic_version }}-linux-{{ host_platform }}.tar.gz"
    #     owner: "{{ elastic_user }}"
    #     group: "{{ elastic_group }}"
    #     dest: "{{ kibana_home }}"
    #     extra_opts: [--strip-components=1]
    #     creates: "{{ kibana_home }}/bin/kibana"
    #   tags:
    #     - kibana_install

##### Starting ######

    - name: copy EnvironmentFile elasticsearch
      become: yes
      ansible.builtin.copy:
        src: "templates/elasticsearch"
        dest: "/etc/default/elasticsearch"
        mode: 0644
        owner: "root"
        group: "root"
        force: true
      tags:
        - elastic_start
    - name: copy elasticsearch.service file
      become: yes
      ansible.builtin.template:
        src: templates/elasticsearch.service.j2
        dest: /lib/systemd/system/elasticsearch.service
        owner: "root"
        group: "root"
        mode: 0644
        force: true
      tags:
        - elastic_start
    - name: copy kibana.service file
      become: yes
      ansible.builtin.template:
        src: templates/kibana.service.j2
        dest: /lib/systemd/system/kibana.service
        owner: "root"
        group: "root"
        mode: 0644
        force: true
      tags:
        - kibana_start
    - name: Create symbolic link to elasticsearch.service file
      become: yes
      file:
        src: "/lib/systemd/system/elasticsearch.service"
        dest: "/etc/systemd/system/elasticsearch.service"
        state: link
      tags:
        - elastic_start
    - name: Create symbolic link to kibana.service file
      become: yes
      file:
        src: "/lib/systemd/system/kibana.service"
        dest: "/etc/systemd/system/kiabana.service"
        state: link
      tags:
        - elastic_start
    - name: Run systemctl daemon-reload for commit unit files
      become: yes
      ansible.builtin.command:
        cmd: systemctl daemon-reload
      tags:
        - kibana_start
    - name: Start elasticsearch via systemd
      become: yes
      ansible.builtin.systemd:
        state: started
        name: elasticsearch
      tags:
        - elastic_start
    - name: Start kibana via systemd
      become: yes
      ansible.builtin.systemd:
        state: started
        name: kiabana
      tags:
        - kibana_start